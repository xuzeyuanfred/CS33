CS33_Homework_1.txt
 
2.71:

A. the problem exists because the code didn't successfully return sign extended integers: after the shiftings, it will just return the 8 bits on the rightmost, since the mask is 0xff, which doesn't necessarily conserve the signed property. So for a signed negative number, we will get all leading zeros, instead of ones, and this is incorrect.

B. one way to fix it is to do the sign extension explicitly and type cast the result into (int)

int xbyte(packed_t word, int bytenum)
{
	return (int) (word << (3-bytenum << 3)) >> 24;
}


2.82:
A. This is not always true.
   the special case can be when x = Tmin, y = -1, y > x 
  i.e. if we have 8 bit 2's complement number: 
  Tmin = 10000000    -Tmin = 10000000 
  	   -1 = 11111111	   1 = 00000001
  	   Tmin < -1 ; -Tmin < 1 still 
  	   Here, it doesn't hold 

B. The conditional ((x+y) << 4) + y - x == 17*y + 15*x
	This is always true, because we can directly translate the above 
	expression into arithmetic: left shift by 4 is just multiplication by 16, thus (x+y) << 4 == 16*x + 16*y
	16*x + 16*y + y - x = 15*x + 17*y

C. This is always true, since in 2's complement, ~x = -x-1 
	~x + ~y  + 1 = (-x-1) + (-y-1) + 1 = -x -y -1 -1 + 1
									   = -x -y -1 
									   = ~(x+y)
D. This is always true, since the bit level behavior of signed and unsigned addition works the same, and in both operations we have eventually unsigned integer as output 

E. Yes, it is always true 
	if we are doing logical shift, we will just get the original value 
	if we are doing arithmetic shift, the value goes toward negative infinity, thus is smaller than x 
	thus in the end, the result is smaller or equal to x 
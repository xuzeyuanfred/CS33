#Lecture 6: Machine Level Data Structure

##Array Allocation 
__Basic Principle__
T A[L]
array of data type T and length L
contiguously allocated region of L * sizeof(T) bytes in memory 

Array Example:
```C
#define ZLEN 5
typedef int zip_dig[ZLEN];
zip_dig cmu = {1, 5, 2, 1, 3};
zip_dig mit = {0, 2, 1, 3, 9};
zip_dig ucb = {9, 4, 7, 2, 0};
```
between each int, there is a 4 byte difference in memory 
in each array, values are stored in sucessive 20 byte blocks 

__Array Accessing__

```C
int get_digit (zip_dig z, int digit)
{
	return z[digit];
}
```
%rdi contains starting address of array
%rsi contains array index
desired digit at %rdi + 4 * %rsi
use memory reference (%rdi, %rsi, 4)

%rdi = z 
%rsi = digit
%eax = z[digit]

```Assembly
movl (%rdi, %rsi, 4), %eax 
```
__Array Loop__

```C
void zincr(zip_dig z)
{
	size_t i;
	for (i = 0; i < ZLEN; i++)
	{ 
		z[i]++;
	}
}
```
%rdi = z

```Assembly
	movl	$0, %eax 			# i = 0 
	jmp 	.L3 				#goto middle 
.L4:
	addl 	$1, ($rdi, %rax, 4)  #Z[i]++
	addq 	$1, %rax 			 # i++
.L3:
	cmpq 	$4, %rax 			 # i : 4
	jbe     .L4 				 # if <=, goto loop
	rep; ret 
```

##Nested Arrays 

```C
#define PCOUNT 4 
zip_dig pgh[PCOUNT] = 
   {{1, 5, 2, 0, 6},
	{1, 5, 2, 1, 3},
	{2, 3, 4, 5, 6},
	{3, 1, 4, 1, 5}};
```

zip_dig pgh[4] equivalent to int pgh[4][5]
both are 2 dimensional arrays 

###Nested Array Row Access
A[i] is array of C elements 
Each element of type T requires K bytes 
starting address: A + i * (C * K)

```C
int *get_pgh_zip(int index)
{
	return pgh[index];
}
```
%rdi = index
```Assembly
leaq (%rdi, %rdi, 4), %rax   # 5 * index
leaq pgh(, %rax, 4), %rax    # pgh + (20 * index)
```
the machine code computes as pgh + 4 * (4 * index) + 4 * index

###Nested Array Element Access
A[i][j] is the element of type T, which requires K bytes 
Address A + K(i*C + j)

```C
int get_pgh_digit
{
	return pgh[index][dig];
}
```
%rdi is index
%rsi is dig

```Assembly 
leaq (%rdi, %rdi, 4), %rax    # 5 * index
addl %rax, %rsi  			  # 5 * index + dig 
movl pgh(, %rsi, 4), %eax     # M[pgh + 4 * (5*index + dig)]
```

###Multi-Level Array Example 

```C
zip_dig cmu = {1, 5, 2, 1, 3};
zip_dig mit = {0, 2, 1, 3, 9};
zip_dig ucb = {9, 4, 7, 2, 0};
#define UCOUNT = 3
int *univ[UCOUNT] = {mit, cmu, ucb}
```
each element of univ is a pointer with 8 bytes memory 
each pointer points to an array of ints 

```C
int get_univ_digit (size_t index, size_t digit)
{
	return univ[index][digit];
}
```
%rsi is digit
%rdi is index
```Assembly 
salq $2, %rsi 				# 4 * digit
addq univ(, %rdi, 8), %rsi  # p = univ[index] + 4 * digit
movl (%rsi), %eax 			# return *p
ret 
```
Element access Mem[Mem[univ + 8 * index] + 4 * digit]
must do two memory reads
first get pointer to row array 
then access element within array 


##Structures 

Structures are represented as block of memory 
Fields ordered according to declacation 
Compiler determines overall size + position of fields 

```C
struct rec {
	int a[4];
	size_t i;
	struct rec *next;
};
```
```C
int *get_ap (struct rec *r, size_t idx)
{
	return &r->a[idx];
}
```
%rdi : r 
%rsi : idx 
```Assembly
leaq (%rdi, %rsi, 4), %rax 
ret 
```

 r 	r+4*idx    

offset of each structure member determined at compile time 
compute as r + 4*idr 

__Following a linked List__

```C
void set_val (struct rec *r, int val)
{
	while(r) {
		int i = r -> i;
		r -> a[i] = val;
		r = r -> next;
	}
}
```

%rdi : r 
%rsi : val 

```Assembly 
.L11:
	movslq 	16(%rdi), %rax   #i = M[r+16], since r has 16 bytes
	movl 	%esi, (%rdi, %rax, 4)
	movq 	24(%rdi), %rdi   # r = M[r+24], corresponds to r = r->next
	testq 	%rdi, %rdi       # test if r == 0
	jne 	.L11 			 # if !=0 goto loop 
```

##Structure & Alignment 

__Unaligned Data__
just a combination of data types, each with its own size 
__Aligned Data__
Primitive data type requires k bytes
Address must be multiple of k 
Required on some machines, advised on x86-64

__Motivation__
Memory accessed by aligned chunks of 4 or 8 bytes (system dependent)
Inefficient to load or store datum that spans quad word boundaries 
Virtual memory trickier when datum spans 2 pages 

__Compiler__
inserts gaps in structure to ensure correct alignment of fields 


###Specific Cases of Alignment 
1 byte: char,...
	no restriction on address 
2 bytes: short 
	lowest 1 but of address must be O2
4 bytes: int, float, 
	lowest 2 bits of address 00
8 bytes: double. long, char*, 
	lowest 3 bits of address 000
16 bytes: long double 
	lowest 4 bits must be 0000


###In structure 
1. specify each element's alignment requirement 
2. Each strucutre has alignment requiremnt K = max(all elements of structure)
3. Initial address & structure length must be multiples of K 

i.e.

```C
struct S1 {
	char c;
	int i[2];
	double v;
};
```
in this case, K = 8 due to the type double.
we have:

------|---------|------|------|----------|--------------|
  C	  | 3 bytes | i[0] | i[1] |  4 bytes |      v       |
------|---------|------|------|----------|--------------|

  1B  +   3B    +  4B  +  4B  +    4B    +      8B      = 24



For largest alignment requirement K 
Overall structure must be multiple of K 

i.e.

```C
struct S2 {
	double v;
	int i[2];
	char c
} *p;
```
-------------|------|------|-----|------------|
      V      | i[0] | i[1] |  C  |    7 bytes |
-------------|------|------|-----|------------|


###Array of Structures 
overall length multiple of K
satisfying alignment requirement for every element 

```C
struct S3 {
	short i;
	float v;
	short j;
} a[10];
```
total size of a[10] = 10 * sizeof(S3) = 10 * (12) = 120
K = 4 due to the float type 

__Accessing Memory__

-----|----------|------|-----|----|
 i   |  2 byte  |	 v |  j  | 2B |
-----|----------|------|-----|----|
Compute array offset 12 * idx
size of(S3), including alignment spacers
Element j is at offset 8 within structure 
Assembler gives offset a + 8 

```C
short get_j (int idx)
{
	return a[idx] * j;
}
```
%rdi : idx

```Assembly
leaq (%rdi, %rdi, 2), %rax    
movzwl a+8(, %rax, 4), %eax
```

__Saving Space__: put large data types first in structure declaration 
then all alignment memory will be added to the tail 


##Floating Point 

###FP Basics:
Argument passed in %xmm0, %xmm1, ...
result returned in %xmm0
All XMM registers caller-saved 

```C
float fadd(float x, float y)
{
	return x + y;
}

double dadd(double x, double y)
{
return x + y;
}
```
x in %xmm0, y in %xmm1

```Assembly
addss 	%xmm1, %xmm0
ret 

addsd 	%xmm1, %xmm0
ret 
```

###FP memory referencing 
integer and pointer arguments passed in regular registers 
FP values passed in XMM registers 
Different mov instructions to move between XMM registers and between memory and XMM registers

```C
double dincr (double *p, double v)
{
	doble x = *p;
	*p = x + v;
	return x;
}
```
p in %rdi, v in %xmm0

```Assembly
movapd 	%xmm0, %xmm1
movsd 	(%rdi), %xmm0 
addsd   %xmm0, $xmm1 
movsd 	%xmm1, (%rdi)
ret
```

Floating Point Comparison:
	ucomiss ucomisd 
	CF, ZF, and PF
Set XMM0 register to 0 with instruction 
xorpd %xmm0, %xmm0
Others loaded from memory 

###Summary 
Arrays:
	elements packd into contiguous region of memory 
	use index arithmetic to locate individual elements 
Structs:
	Elements packed into single region of memory 
	Access using offset determined by compiler 
	Possible require internal and external padding to ensure alignment
Combinations:
	can nest structs and array code arbitrarily 
Floating Point:
	Data held and operated on in XMM registers







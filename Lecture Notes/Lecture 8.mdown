#Floating Point 

Value 	  	Representation

5 3/4  		(101.11)2      
2 7/8 		(10.111)2
1 7/16 		(1.0111)2

__Observations__
Divide by 2 by shifting right (unsigned)
Multiply by 2 by shifting left 
Number of the form (0.11111...)2 is just below 1.0 
 1/2 + 1/4 + ...  -> 1.0
 use notation 1.0-epsilon 


Limitation 1:
Can only exactly represent numbers of the form x/2^k
Other rational numbers have repeating bit representations

 value      Representation
 1/3 		0.010101010101...
 1/5 		0.001100110011...
 1/10  		0.0001100110011...

Limitation 2:
Just one setting of binary point within the w bits 
Limited range of numbers (very small values? very large?)

##IEEE Floating Point
IEEE standard 754
	established in 1985 as uniform standard for floating point arithmetic
	before that, many idiosyncratic formats 
	Supported by all major CPUs
Nice standards for rounding, overflow, underflow
Hard to make fast in hardware 
Numerical analysts predonimated over hardware designers in defining standard


##Floating Point Representation
__Numerical Form__:

(-1)^s M 2^E
__sign bit__: 		s determines whether number is negative or positive 
__significand__: 	M normally a fractional value in range [1.0, 2.0].
__Exponent__: 		E weights value by power of two 

__Encoding__

MSB S is sign bit s 
exp field encodes E (but is not equal to E)
frac field encodes M (but is not equal to M)
--|---------|----------------|
s |  exp 	| frac 			 |
--|---------|----------------|

32 bits: 1 bit sign + 8 bits exp + 23 bits frac
64 bits: 1 bit sign + 11 bits exp + 52 bits frac
80 bits: 1 bit sign + 15 bits exp + 63 bits frac

###Normalized Values 

Exponent coded as a biased value: E = Exp - Bias 
Exp: unsigned value of exp field 
Bias: 2^(k-1) - 1, where k is number of exponent bits 
	Single precision: 127 (Exp: 1...254, E: -126..127)
	Double precision: 1023(Exp: 1...2046, E:-1022..1023)

Significand coded with implied leading 1: M = 1.xxxxx...
xxx...x: bits of frac field 
Minimum when frac = 000...0
Maximum when frac = 111...1 
Get extra leading bit for "free"

example:

float F = 15123.0
15123 = 11101101101101
	  = 1.1101101101101 * 2^13

Significand
	  M = 1.1101101101101
	 frac = 11011011011010000000000
Exponent:
	E = 13
	Bias = 127
	Exp = 140 = 1001100 
Result:
	0  10001100  11011011011010000000000

##Denormalized Values 
Condition: exp = 000...0

Exponent value: E = 1 - Bias (instead of E = 0 - Bias)
Significand coded with implied leading 0: M = 0.xxxx..x
xxx..x : bits of frac

Case
 exp = 00...0, frac = 000...0
 	Represents zero value
 	Note distinct values +0 and -0 
 exp = 00...0, frac != 000...0
 Numbers closest to 0.0
 Equispaced 

 ###Special Values 
 Condition: exp = 111...1
 Case: exp = 111...1, frac = 000...0
 Represents infinity 
 Operation that overflows 
 Both positive and negative 

 Case: exp = 111...1, frac != 000...0
 Not a number (NaN)
 represents case when no numeric value can be determined 
 e.g. sqrt(-1), inf, -inf, inf * 0


###Tiny Floating Point Example

8 bit Floating Point Representation
	The sign bit is the most significant bit 
	The next four bits are the expoenents, with a bias of 7
	The last three bits are the frac 
Same general format as IEEE format 
	Normalized, denormalized 
	representation of 0, NaN, infinity 

(image for the normalized and denormalized value)

###Distribution of Values:





###Floating Point Operations: Basic Idea

x + y = Round(x + y)
x * y = Round(x * y)

Rounding Models (illustrate with $ Rounding)
Towards zero, round down, round up, nearest even (default)





























#CS33 Lecture 1

##The most important thing is this class are the labs

###Grading Percentage:
Exams (45%)
	Midterm, 20%
	Final, 35%
	Open book, open notes
Labs (40%)
	4 labs, 10% each
	Work alone
Homework (5%)
	5 assignments, 1% each
	Electronic submission
Homework and Labs Due via CourseWeb by Midnight 

###Cheating:
Sharing Code: copying retying looking at or supplying a copy of a file
###Not Chearing:
Help with high level design issues
Help others with debugging 
Help Others to use systems and tools 

###SEAS Linux Machine

lnxsrv.seas.ucla.edu
Remote Access Only 

```shell
ssh -X lnxsrv.seas.ucla.edu -l testuser
```
where the tesetuser is your username 

##Course Themes
Abstraction has limits 
Low level design makes you a more efficient programmer
and Bugs are hard to find by merely on a high level interface

###Compillation Process

	hello.c (text)
 	 | 
 	 |
    pre-processor (cpp)
     |
     |
    hello.i (text)
     |
     |
    compiler (ccl)
     |
     |
    hello.s(text)
     |
     |
    assembler(as)
     |
     |
    hello.o (binary)
     |
     |
    linker (id)
     |
     |
    hello (binary)




##Bits and Bytes 

A bit is either a 0 or 1
Computer determines what to do, and manipulate numbers, strings, etc...
Bits are easy to store and have reliable transmission on noisy environment


###Representing information as bits

Base Two Number Representation
1 Byte = 8bits
Decimal: 0 to 255 base 10
Hexadecimal: 00 to FF base 16
write (FA1D37B)16 in C as:
0xFA1D37B


###Type and there memory in C

|C DataType    |typical 32 |typical 64	|	x86-64 |
|--------------|:---------:|-----------:|---------:|
|	Char       |	1	   |	1		|	1	   |
|  	short 	   |	2	   |	2		|	2	   |
|	int 	   |	4	   |	4		|	4	   |
|   long       |    4      |    8       |   8      |
|   float      |    4      |    4       |   4      |
|   doble      |    8      |    8       |   8      |
| long double  |    -      |    -       |  10/16   |
|   pointer    |    4      |    8       |   8      |



###Boolean Algebra
| A | B | A&B |
|---|---|-----|
| 1 | 1 |  1  |         
| 1 | 0 |  0  |
| 0 | 1 |  0  |
| 0 | 0 |  0  |

| A | ~A|
|---|---|				
| 1 | 0 |
| 0 | 1 |


| A | B |  A|B  |
|---|---|-------|
| 1 | 1 |   1   |
| 1 | 0 |   1   |		
| 0 | 1 |   1   |
| 0 | 0 |   0   |


| A | B | A^B   |
|---|---|-------|
| 1 | 1 |  0    |
| 1 | 0 |  1    |		
| 0 | 1 |  1    |
| 0 | 0 |  0    |


Representation: Width w bit vector represents subsets of {0,1,...,w-1}
a(j) = 1 if j is in A

i.e. the position is in small endian: the most significant bit is at rightmost

num:0110001011    {8,7,3,1,0}
pos:9876543210



###Bit Level Operations in C

Operators: &, |, ~, ^

Apply to any integral data type, i.e. long, int, short, char, unsigned 
View arguments as bit vectors 
Arguments applied bit-wise

Hex:	~0x41  -> 0xBE
Bin:	~01000001 -> 10111110

Hex:	~0x00 -> 0xFF
Bin:	~00000000 -> 11111111

Hex:    0x69 & 0x55
Bin:    01101001 & 01010101 -> 01000001

###Logic Comparisons

&&, ||, !
0 is viewd as false, and everything else true
always return 0 or 1

!0x41 -> 0x00
!0x22 -> 0x00
!0x00 -> 0x01
!!0x41 -> 0x01

0x69 && 0x55 -> 0x01
Only return 0x00 or 0x01
with all these logical operators 


###Shift Operators 

most sig: leftmost bit
least sig: rightmost bit

Left shit: x << y
shift bit vector x left y bits, add 0s to the right 

right shift: x >> y
(logical) fill with 0's on the left
(arithmetic) replicate most significant bit on the left 

01100010 << 3 -> 00010000 (add zeros to the right)
01100010 >> 2 -> (logical)0011000
			  -> (arithmetic)0011000
10100010 << 3 -> 00010100
		 >> 2 -> (logical)00101000
		 >> 2 -> (arithemtic)11101000

Undefined Bahavior: shit amount <0 or > wordsize

###Encoding Integers
Unsigned: normal binary representation

Two's complement: gives a sign 

|Tmin| = Tmax + 1 (asymmetry of 2's complement)
Casting doesn't change bit representation
all results are nonnegative

C short 2 bytes long:

Sign bits: most significant bit represents sign
0 for positive
1 for negative

Convert from binary code to 2's complement:
1. write down the binary vector
2. flip all 0s and 1s
3. add 1 to the vector 


Convert from 2's complement to unsigned integer:
1. if sign bit is 0, they are exactly the same
2. if sign bit is 1, flip all 0s and 1s 
3. add 1 to the outcome 
4. result is the negative version of outcome 

###Numeric Range
Umin = 0
Umax = 2^w -1  (1111...1)

###Two's Complement Values
Tmin = -2^(w-1)
Tmax = 2^(w-1)-1
Minus 1 = 11111...1

Tmax + Tmin  = 1 

|Tmin| = Tmax + 1 (assymetry)

Umax = 2 * Tmax + 1 

1000 is -8 in 2's complement

in C, we have 

```C
#include <limits.h>
const int ULONG_MAX
const int LONG_MAX
const int LONG_MIN
```
These values are platform specific


Conversion Visualization:

![Conversion Visualization]
(https://github.com/xuzeyuanfred/CS33/blob/master/Lecture%20Notes/Screen%20Shot%202016-03-30%20at%2012.06.39%20PM.png)


###Signed vs. Unsigned in C

By default constants are signed
unsigned if have a 'U' suffix
i.e. oU

The mapping(0x0 to 0xf):
from 0x0 to 0x7, we have the same mapping
from 0x8 to 0xF, we add 16 when converting from signed to unsigned

Ordering Inversion: Negative -> large positive 

|2's Complement |  Unsigned |
|---------------|-----------|
|	Tmax 	    |  Tmax     |
|    0       	|    0      |
|    -1         |  Umax     |
|    -2         |  Umax - 1 |
|    Tmin       |  Tmax + 1 |


type casting 

```C
int tx, ty;
unsigned ux, uy; 
tx = (int) ux;
uy = (unsigned) ty;
```
Casting Surprises:

1. if there is a mix of signed and unsigned in single expression, the signed implicitly cast to unsigned
2. including comparison operators >, <, <=, >=, ==

Example:

| Constant 1 | Constant 2  | Relation| Evaluation|
|------------|-------------|---------|-----------|
|     0      |    0U       |   ==    | unsigned  |
|     -1     |     0       |    <    |  signed   |
|     -1     |    0U       |    >    |  unsigned |
|     Tmax   |   Tmin      |    >    |  signed   |
|     TmaxU  |   Tmin      |    <    |  unsigned |
|     -1     |     -2      |    >    |  signed   |
|     -1U    |     -2      |    >    |  unsigned |
|     Tmax   |   -Tmin     |    <    |  unsigned |
|     Tmax   |(int)(-Tmin)U|    >    |  signed   | 


###Sign Expansion

Given w bits binary vector, convert to w+k bits vector
the solution is to copy the sign bit k times to the left
i.e. converting a short to an int is doing sign extension

Expanding:

*unsigned: zero added
*signed: sign extension
*both yield expected result

Truncating:

*Unsigned/signed: bits are truncated
*Results reinterpretated
*Unsigned: mod operation
*Signed: similar to mod
*small numbers yield expected results


###Addition

Unsigned Addition:
1. add from rightmost(least significant) to the leftmost(most significant) bit
2. 1+0, 0+1 gets 1; 0+0 gets 0, 1+1 gets 0 and brings a carry 1 to the next bit
3. if there results in an extra carry at the leftmost bit, ignore it
4. if such a carry bit exists, an overflow is detected.
 
Two's Complement Addition:
1. When both numbers are positive, we treat it in the case of unsigned addition
2. when numbers are of different signs:
i.e. 56 + (-19)
19 = 0010011
-19 = 1101101


i.e. 72 + (-100)
100 = 01100100
-100 = 10011100



*TAdd and UAdd have identical Bit-Level Behavior


```C
int s, t, u, v;
s = (int) ((unsigned) u + (unsigned) v);
t = u + v;
```

This C code will give that t == s

Addition overflow in 2's complement:
1. if two positive number results in a negative number
2. if two negative number results in a positive number 
3. if carry into the sign-bit position is not equal to the carry out of the sign-bit position 
4. no overflow when positive combines with negative values



### Multiplication 

Goal: computing product of w-bit numbers x,y, either signed or unsigned;
But, exact results can be bigger than w bits
*Unsigned: up to 2w bits,
 result range:  0 <= x*y <= (2^w - 1)^2
*Two's complement min: up to 2w-1 bits
  x*y >= (-2^w-1)*(2^w-1 - 1)
 Two's complement max: up to 2w bits, only for (Tmin)^2

Power of 2 Multiplication with Shift:
u << k gives u * 2^k for both signed and unsigned 
Left shift (add zeors to the rightside)

Power of 2 division with Shift (right shift, arithmetic)
u >> k gives u / 2^k
use arithemtic right shift (adding most significant bits on the left)


##Summary On Arithmetic:

Addition: Unsigned/signed: Normal Addition followed by truncate,
          same operation on bit level
          Unsigned: addition mod 2^w
          (mathematical addition + possible subtraction by 2^w)
        Signed: modified addition mod 2^w (possible addition or subtraction by 2^w)

Multiplication: Unsigned/signed : Normal multiplication followed by truncate,
                same operation on bit level
                Unsigned: Multiplication mod 2^w
                Signed: Modified Multiplcication mod 2^w 



###Unsigned Warnings 

```C
unsigned i;
for (i = cnt-2; i >=0; i--)
    a[i] += a[i+1];
```
this will never terminate the loop, since i >=0 always true for unsigned i
Modify it:

```C
size_t i;
for (i = cnt-2; i < cnt; i--)
    a[i] += a[i+1];
```
when i is less than 0, we have an overflow occured, and i -> UMax
data type size_t defined as unsigned value with length = word size

Use unsigned when performing Modular Arithemtic
Use unsigned when using bits to represent sets




##Memeory Organization Byte Organization


![Memory graph]
(https://github.com/xuzeyuanfred/CS33/blob/master/Lecture%20Notes/Screen%20Shot%202016-03-30%20at%208.50.04%20PM.png)


*Programs refer to data by address
computer memory conceptually can be envisioned as A huge array of bytes 
and address is like an index to that array, 
and a pointer variables stores the address

System provides private address spaces to each process
process is a program being executed
and each program can only deal with its private data

Program --> Memory --> CPU 

###Machine Words

Any given computer has a 'Word Size'
most machines use 32bits as word size; which limits address to 2^32 = 4GB 
some use 64bits word size or 2^64 = 18EB memories
word size is always an integer
different data type thus consumes different consecutive chunks of memory.

[!Memory Layout]
(https://github.com/xuzeyuanfred/CS33/blob/master/Lecture%20Notes/Screen%20Shot%202016-03-30%20at%208.52.28%20PM.png)


##Byte Ordering

(Sun, PPC Mac, Internet)
Big Endian: Least significant byte has the highest address

(x86, ARM processors running Android, iOS, and Windows)
Little Endian: Least significant byte has the lowest address

for a hexvalue 0x0123456

[!Endian]
()

[!Endian_2]
()



Print Byte representation of Data:

```C
typedef unsigned char *pointer;

void show_bytes(pointer start, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
        prinft("%p\t0x%.2x\n",start+i, start[i]);
    }
    printf("\n");
}
```
Here, %p means to print pointer
      %x means to print Hexadecimal

For pointers, different compillers and machines assign different locations 
to objects at run time. 

###Cstring

Byte ordering is not an issue in Cstring:
1. Cstring is represented by array of chars.
2. Each char is encoded in ASCII
3. has standard 7-bit encoding of character set
'0' -> 0x30
'i' -> 0x30+i
null terminated, with final char = 0
















